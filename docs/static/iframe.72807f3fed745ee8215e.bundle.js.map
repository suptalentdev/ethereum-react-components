{"version":3,"file":"static/iframe.72807f3fed745ee8215e.bundle.js","sources":["webpack:///./src/components/Identicon.jsx"],"sourcesContent":["/* eslint-disable */\nimport React, { Component } from 'react'\nimport blockies from 'ethereum-blockies'\n// import i18n from '../i18n'\nimport hqxConstructor from '../lib/hqx'\n\n// window.blockies = blockies\n\nconst mod = {\n  Math: window.Math,\n}\nhqxConstructor(mod)\nconst { hqx } = mod\n\n// copied from https://github.com/ethereum/meteor-package-elements/blob/master/identicon.html\n// see also https://github.com/ethereum/blockies/blob/master/react-component.js\n// see also https://github.com/alexvandesande/meteor-identicon/blob/master/lib/identicon.js\nexport default class DappIdenticon extends Component {\n  constructor(props) {\n    super(props)\n    let seed = this.props.seed || '0x0000000000000000000000000000000000000000'\n    const identity = seed.toLowerCase()\n    this.state = {\n      imageData: this.identiconData(identity), // cache image data\n    }\n  }\n\n  // uses hqx pixel scaling with max value 4 x 2 = factor 8\n  identiconData(identity) {\n    return hqx(hqx(\n      blockies.create({\n        seed: identity,\n        size: 8,\n        scale: 1,\n      }),\n      4,\n    ), 4)\n      .toDataURL()\n  }\n\n  // uses blockie's factor 8 scaling\n  identiconDataPixel(identity) {\n    return blockies\n      .create({\n        seed: identity,\n        size: 8,\n        scale: 8,\n      })\n      .toDataURL()\n  }\n\n  renderJazzIdenticon(address) {\n    // if we wrap jazzicon here we should probably lazy-load it\n    // https://github.com/MetaMask/metamask-extension/blob/60feeb393be5d84679dd7b94dba58540ffa166bd/ui/lib/icon-factory.js\n    return (\n      <span>placeholder</span>\n    )\n  }\n\n  render() {\n    if (this.props.jazz) {\n      return this.renderJazzIdenticon(this.props.seed)\n    }\n\n    return (\n      <span title=\"elements.identiconHelper\">\n        <img src={this.state.imageData} width=\"64\" height=\"64\" className=\"identicon-pixel\" />\n      </span>\n    )\n  }\n}\n"],"mappings":"AAQA","sourceRoot":""}