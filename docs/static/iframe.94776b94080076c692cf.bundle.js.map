{"version":3,"file":"static/iframe.94776b94080076c692cf.bundle.js","sources":["webpack:///./src/components/Identicon.jsx"],"sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport blockies from 'ethereum-blockies'\nimport styled from 'styled-components'\nimport i18n from '../i18n'\nimport hqxConstructor from '../lib/hqx'\nimport anonymousIcon from '../assets/images/anonymous-icon.png'\n\nconst mod = { Math: window.Math }\nhqxConstructor(mod)\nconst { hqx } = mod\n\nexport default class Identicon extends Component {\n  static displayName = 'Identicon'\n\n  static propTypes = {\n    address: PropTypes.string,\n    anonymous: PropTypes.bool,\n    size: PropTypes.oneOf(['nano', 'tiny', 'small', 'medium', 'large'])\n  }\n\n  static defaultProps = {\n    anonymous: false,\n    size: 'medium'\n  }\n\n  // uses hqx pixel scaling with max value 4 x 2 = factor 8\n  identiconData = address => {\n    return hqx(\n      hqx(blockies.create({ seed: address, size: 8, scale: 1 }), 4),\n      4\n    ).toDataURL()\n  }\n\n  // uses blockie's factor 8 scaling\n  identiconDataPixel = address => {\n    return blockies.create({ seed: address, size: 8, scale: 8 }).toDataURL()\n  }\n\n  render() {\n    const { address, anonymous, size } = this.props\n\n    if (anonymous) {\n      return (\n        <StyledSpanAnonymous\n          {...this.props}\n          backgroundImage={`url('${anonymousIcon}')`}\n          size={size}\n        />\n      )\n    }\n\n    if (!address) {\n      return <StyledSpanEmpty {...this.props} size={size} />\n    }\n\n    return (\n      <StyledSpan\n        {...this.props}\n        backgroundImage={`url('${this.identiconData(address.toLowerCase())}')`}\n        size={size}\n        title={i18n.t('elements.identiconHelper')}>\n        <StyledImg src={this.identiconDataPixel(address.toLowerCase())} />\n      </StyledSpan>\n    )\n  }\n}\nconst config = {\n  nano: {\n    size: '10px',\n    boxShadow:\n      'inset 0 1px 1px hsla(0,0%,100%,.1), inset 0 -1px 1px rgba(0,0,0,.1)'\n  },\n  tiny: {\n    size: '21px',\n    boxShadow:\n      'inset 0 1px 1px hsla(0,0%,100%,.4), inset 0 -1px 2px rgba(0,0,0,.3)'\n  },\n  small: {\n    size: '32px',\n    boxShadow:\n      'inset 0 2px 2px hsla(0,0%,100%,.4), inset 0 -2px 4px rgba(0,0,0,.4)'\n  },\n  medium: {\n    size: '48px',\n    boxShadow:\n      'inset 0 4px 4px hsla(0,0%,100%,.4), inset 0 -4px 6px rgba(0,0,0,.5)'\n  },\n  large: {\n    size: '64px',\n    boxShadow:\n      'inset 0 4px 8px hsla(0,0%,100%,.4), inset 0 -4px 12px rgba(0,0,0,.6)'\n  }\n}\n\nconst StyledSpanAnonymous = styled.span`\n  background-image: ${props => props.backgroundImage};\n  background-size: cover;\n  border-radius: 50%;\n  box-shadow: ${props => config[props.size].boxShadow};\n  display: inline-block;\n  height: ${props => config[props.size].size};\n  width: ${props => config[props.size].size};\n`\n\nconst StyledSpanEmpty = styled.span`\n  background-color: white;\n  background-size: cover;\n  border-radius: 50%;\n  box-shadow: ${props => config[props.size].boxShadow};\n  display: inline-block;\n  height: ${props => config[props.size].size};\n  width: ${props => config[props.size].size};\n`\n\nconst StyledSpan = styled.span`\n  background-image: ${props => props.backgroundImage};\n  background-size: cover;\n  border-radius: 50%;\n  box-shadow: ${props => config[props.size].boxShadow};\n  cursor: help;\n  display: inline-block;\n  overflow: hidden;\n  transition: border-radius 2.5s;\n  transition-delay: 3s;\n  height: ${props => config[props.size].size};\n  width: ${props => config[props.size].size};\n  :hover {\n    border-radius: 15%;\n    transition-delay: 1s;\n  }\n`\n\nconst StyledImg = styled.img`\n  height: 100%;\n  width: 100%;\n  transition: opacity 5s;\n  opacity: 0;\n  :hover {\n    transition: opacity 0.25s;\n    opacity: 1;\n  }\n`\n"],"mappings":"AAQA","sourceRoot":""}